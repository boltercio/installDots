#!/usr/bin/env bash
#  ╦═╗╦╔═╗╔═╗  ╦╔╗╔╔═╗╔╦╗╔═╗╦  ╦  ╔═╗╦═╗
#  ╠╦╝║║  ║╣   ║║║║╚═╗ ║ ╠═╣║  ║  ║╣ ╠╦╝
#  ╩╚═╩╚═╝╚═╝  ╩╝╚╝╚═╝ ╩ ╩ ╩╩═╝╩═╝╚═╝╩╚═
#	Script to install bspwm and other tool config dotfiles
# Author: z0mbi3
# Modifier: allenmagic
#	raw_url: https://github.com/gh0stzk
# modifi_url: https://github.com/allenmagic
### ---------- Basicos scripts ---------- ### 
 
green="\e[0;32m\033[1m"           # Correct message
red="\e[0;31m\033[1m"             # Failed message
blue="\e[0;34m\033[1m"            # Normal message
yellow="\e[0;33m\033[1m"          # Warning message
purple="\e[0;35m\033[1m"          # Resalto de variable
turquoise="\e[0;36m\033[1m"
gray="\e[0;37m\033[1m"            # Color normal
end="\033[0m\e[0m"                # Final de color

trap ctrl_c INT

function ctrl_c(){
    echo -e "${Red}[!]${gray} Saliendo...${end}\n"
    tput cnorm
    exit 0
}

function logo () {
# Letra "Calvin S" de https://www.freetool.dev/es/generador-de-letras-ascii
clear
echo -e "
${gray}╔╗ ┌─┐┬ ┌┬┐┌─┐┬─┐╔═╗┌─┐┬─┐┬┌─┐┌┬┐┌─┐
${gray}╠╩╗│ ││  │ ├┤ ├┬┘╚═╗│  ├┬┘│├─┘ │ └─┐
${gray}╚═╝└─┘┴─┘┴ └─┘┴└─╚═╝└─┘┴└─┴┴   ┴ └─┘
                        ${turquoise}By Boltercio${end}

${gray}$Mensaje${end}"
}

backup_folder=~/.RiceBackup
date=$(date +%Y%m%d-%H%M%S)

########## ---------- You must not run this as root ---------- ##########

if [ "$(id -u)" = 0 ]; then
    echo "Este script NO DEBE ejecutarse como root."
    exit 1
fi

########## ---------- Welcome ---------- ##########

logo "Bienvenido!!"
echo -e "${red}Este script comprobara si tienes instaladas las dependencias necesarias
si no lo estan las instalara. despues clonara el repositorio con los temas en tu directorio HOME. 
Despues de esto hara un backup de tus archivos de configuracion y copiara los de los nuevos temas.
Te pedira acceso como root para poder cambiar tu shell por defecto a zsh por si no lo tubieras intalado. 
Este script no tiene potencial para romper tu sistema, solo realiza modificaciones del aspecto visual.${end}"

while true; do
	read -rp " Quieres continuar? [y/N]: " yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) exit;;
			* ) printf " Error: just write 'y' or 'n'\n\n";;
		esac
    done
clear

########## ---------- Instalando paquetes ---------- ##########

logo "Instalando paquetes necesarios..."

dependencias=(build-essential libgtk-3-dev libdbusmenu-glib-dev libdbusmenu-gtk3-dev \
			  bspwm polybar sxhkd brightnessctl dunst rofi picom xdo xdotool jgmenu \
			  jq policykit-1-gnome git xclip \
			  feh ueberzug maim webp libwebp-dev xdg-user-dirs \
			  webp-pixbuf-loader xorg physlock papirus-icon-theme \
			  fonts-jetbrains-mono fonts-inconsolata lightdm  \
			  x11-utils x11-xserver-utils stalonetray \
			  kitty lsd wget bat neovim zsh )

is_installed() {
    dpkg -l "$1" &> /dev/null
    return $?
}

echo -e "${blue}[*] ${gray}Comprobando paquetes requeridos...\n${end}"
for paquete in "${dependencias[@]}"
do
if ! is_installed "$paquete"; then
    sudo apt-get install -qq -y "$paquete" 1>/dev/null 2>>RiceError.log
    if [ "$(echo $?)" != 0 ]; then
        echo -e "${red}[!] ${gray}Ha fallado la instalacion de $paquete${end}"
    else
        echo -e "${blue}[*] ${gray}$paquete se ha instalado correctamente.${end}"
    fi
else
    echo -e "${green}[+] ${gray}$paquete ya esta instalado en tu sistema.${end}"
    sleep 0.5
fi
done
sleep 0.5
clear


########## ---------- Preparando directorios ---------- ##########

# Verifica si el archivo user-dirs.dirs no existe en ~/.config
if [ ! -e "$HOME/.config/user-dirs.dirs" ]; then
	xdg-user-dirs-update
	echo "${gren}[+} ${gray}Creando directorios de usuario${end}"
fi
sleep 0.5
clear

########## ---------- Clonando temas ---------- ##########
logo "Descargando dotfiles"

repo_url="https://github.com/boltercio/dotfiles"
repo_dir="$HOME/.dotfiles"

# Verifica si el directorio del repositorio ya existe y, si es así, lo elimina
if [ -d "$repo_dir" ]; then
	echo -e "${red}[!} ${gray}Removing existing dotfiles repository\n${end}"
	rm -rf "$repo_dir"
fi

# Clona el repositorio
echo -e "Clonando archivos desde $repo_url\n"
git clone --depth=1 "$repo_url" "$repo_dir"
cd $repo_dir

sleep 2
clear


########## ---------- Backup files ---------- ##########

logo "Realizando backup de configuraciones"

echo -e "${gray}Si tienes una poderosa y super pro configuracion de NEOVIM, responde 'n' a la siguiente pregunta. si respondes 'y' tu configuracion se movera al directorio de backup.${end}"

while true; do
    read -rp "Quieres probar la configuracion de neovim de gh0stzk? (y/n): " try_nvim
    if [[ "$try_nvim" == "y" || "$try_nvim" == "n" ]]; then
        break
    else
        echo "Respuesta invalida. selecciona 'y' o 'n'."
    fi
done

echo -e "Backup files will be stored in $HOME/.RiceBackup"
sleep 10

[ ! -d "$backup_folder" ] && mkdir -p "$backup_folder"

for folder in bspwm alacritty picom rofi eww sxhkd dunst kitty polybar ncmpcpp ranger tmux zsh; do
    if [ -d "$HOME/.config/$folder" ]; then
        if mv "$HOME/.config/$folder" "$backup_folder/${folder}_$date" 2>> RiceError.log; then
            echo -e "${green}[+] ${gray}Directorio salvado correctamente en $backup_folder/${folder}_$date${end}"
            sleep 1
        else
            echo -e  "${red}[!] ${gray}Fallo al guardar el directorio $folder. Puedes verlo en RiceError.log${end}"
            sleep 1
        fi
    else
        echo -e "${yellow}[*] ${gray}El directorio $folder no existe, no necesita backup${end}"
        sleep 1
    fi
done

if [[ $try_nvim == "y" ]]; then
        # Backup nvim
    if [ -d "$HOME/.config/nvim" ]; then
        if mv "$HOME/.config/nvim" "$backup_folder/nvim_$date" 2>> RiceError.log; then
            echo -e "${green}[+] ${gray}Directorio salvado correctamente en $backup_folder/nvim_$date${end}"
            sleep 1
        else
            echo -e "${red}[!] ${gray}Fallo al guardar el directorio nvim. puedes verlo en RiceError.log${end}"    
            sleep 1
        fi
    else
        echo -e "${yellow}[*] ${gray}El directorio nvim no existe, no necesita backup${end}"
        sleep 1
    fi
fi

if [ -f ~/.zshrc ]; then
    if mv ~/.zshrc "$backup_folder"/.zshrc_"$date" 2>> RiceError.log; then
        echo -e "${green}[+] ${gray}Directorio salvado correctamente en $backup_folder/zshrc_$date${end}"
    else
        echo -e "${red}[!] ${gray}Fallo al guardar el archivo zshrc. puedes verlo en RiceError.log${end}"
    fi
else
    echo -e "${yellow}[*] ${gray}El archivo .zshrc no existe, no necesita backup${end}"
fi

echo -e "${green}[+] ${gray}Backup completado.${end}"
sleep 5

########## ---------- Copy the Rice! ---------- ##########

logo "Instalando dotfiles.."
echo -e "${green}[+] ${gray}Copiando archivos a sus respectivos directorios${end}"

[ ! -d ~/.config ] && mkdir -p ~/.config
[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
[ ! -d ~/.local/share ] && mkdir -p ~/.local/share

for dirs in ~/dotfiles/config/*; do
    dir_name=$(basename "$dirs")
# If the directory is nvim and the user doesn't want to try it, skip this loop
    if [[ $dir_name == "nvim" && $try_nvim != "y" ]]; then
        continue
    fi
    if cp -R "${dirs}" ~/.config/ 2>> RiceError.log; then
		echo -e "${green}[+] ${gray}Configuracion $dir_name instalada.${end}"
        sleep 1
    else
        echo -e "${red}[!] ${gray}La instalacion de la configuracion $dir_name ha fallado, puedes verlo en RiceError.log${end}"
        sleep 1
    fi
done

for folder in applications asciiart fonts; do
    if cp -R ~/dotfiles/misc/$folder ~/.local/share/ 2>> RiceError.log; then
        echo -e "${green}[+] ${gray}Directorio $folder copiado correctamente${end}"
        sleep 1
    else
        echo -e "${red}[!] ${gray}Fallo al copiar el directorio $folder, puedes verlo en RiceError.log${end}"
        sleep 1
    fi
done

if cp -R ~/dotfiles/misc/bin ~/.local/ 2>> RiceError.log; then
    echo -e "${green}[+] ${gray}Directorio $folder copiado correctamente${end}"
    sleep 1
else
    echo -e "${red}[!] ${gray}Fallo al copiar el directorio $folder, puedes verlo en RiceError.log${end}"
    sleep 1
fi

cp -f "$HOME"/dotfiles/home/.zshrc "$HOME"
fc-cache -rv >/dev/null 2>&1

echo -e "Archivos copiados correctamente!!"
sleep 5


########## ---------- Instalando plugins para zsh ---------- ##########
logo "Instalando complementos zsh"

git clone https://github.com/zsh-users/zsh-autosuggestions.git
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/sudo/sudo.plugin.zsh
wget https://raw.githubusercontent.com/zsh-users/zsh-history-substring-search/master/zsh-history-substring-search.zsh

[ ! -d /usr/share/zsh/plugins ] && sudo mkdir -p /usr/share/zsh/plugins
[ ! -d /usr/share/zsh/plugins/zsh-sudo ] && sudo mkdir -p /usr/share/zsh/plugins/zsh-sudo
[ ! -d /usr/share/zsh/plugins/zsh-history-substring-search ] && sudo mkdir -p /usr/share/zsh/plugins/zsh-history-substring-search
sudo mv sudo.plugin.zsh /usr/share/zsh/plugins/zsh-sudo/
sudo mv sudo-history-substring-search.zsh /usr/share/zsh/plugins/zsh-history-substring-search/
sudo mv zsh* /usr/share/zsh/plugins/

########## ---------- Instalando EWW ---------- ##########

logo "instalando EWW"
# Installing Eww
if command -v eww >/dev/null 2>&1; then 
	echo -e "${green}[+] ${gray}Eww is already installed\n${end}"
else
	echo -e "${green}[+] ${gray}Instalando Eww, esto puede tardar unos 10 minutos.\n${end}"
	{
	sudo apt install curl
		cd "$HOME" || exit
		git clone https://github.com/elkowar/eww
		cd eww || exit
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
		. "$HOME/.cargo/env"
		cargo build --release --no-default-features --features x11
		sudo install -m 755 "$HOME/eww/target/release/eww" -t /usr/bin/
	} && {
		cd "$HOME" || exit
	    rm -rf {.cargo,.rustup,eww}
    } || {
        echo -e "${red}[!] ${gray}Fallo al installar Eww. tendras que instalarlo manualmente.\n${end}"
        sleep 2 
    }
fi

########## --------- Cambiando shell a zsh ---------- ##########

logo "Cambiando shell predeterminada a zsh"

if [[ $SHELL != "/usr/bin/zsh" ]]; then
	echo -e "${green}[+] ${gray}Cambiando tu shell a zsh. se necesita acceso root${end}"
	# Cambia la shell a zsh
	chsh -s /usr/bin/zsh
	echo -e "${green}[+] ${gray}Shell cambiada a zsh. Por favor reinicia el sistema.${end}"
else
	echo -e "${green}[+] ${gray}Zsh ya es tu shell por defecto.${end}"
fi
zsh
